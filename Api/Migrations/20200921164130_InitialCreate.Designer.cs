// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Api.Migrations
{
    [DbContext(typeof(OutfitDbContext))]
    [Migration("20200921164130_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:exif_orientation", "undefined,normal,flip_horizontal,rotate180,flip_vertical,transpose,rotate90,transverse,rotate270")
                .HasAnnotation("Npgsql:Enum:notification_type", "shot_posted,shot_include_person_tag,shot_liked,commented,comment_include_person_tag,comment_liked,followed")
                .HasAnnotation("Npgsql:Enum:verification_method", "email,sms")
                .HasAnnotation("Npgsql:Enum:verification_purpose", "sign_up,change_email,reset_password")
                .HasAnnotation("Npgsql:PostgresExtension:citext", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.BrandHiLoSequence", "'BrandHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.CommentHiLoSequence", "'CommentHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.HashTagHiLoSequence", "'HashTagHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ImageHiLoSequence", "'ImageHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ItemTagHiLoSequence", "'ItemTagHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.NotificationHiLoSequence", "'NotificationHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PersonHiLoSequence", "'PersonHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ProductHiLoSequence", "'ProductHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PushTokenHiLoSequence", "'PushTokenHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ShotHiLoSequence", "'ShotHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.VerificationHiLoSequence", "'VerificationHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Api.Data.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "BrandHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("brand");
                });

            modelBuilder.Entity("Api.Data.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "CommentHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ShotId")
                        .HasColumnName("shot_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ShotId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Api.Data.Models.HashTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "HashTagHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnName("tag")
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.ToTable("hash_tag");
                });

            modelBuilder.Entity("Api.Data.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "ImageHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Bucket")
                        .IsRequired()
                        .HasColumnName("bucket")
                        .HasColumnType("text");

                    b.Property<long?>("ClosetBackgroundPersonId")
                        .HasColumnName("closet_background_person_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("content_type")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnName("height")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("text");

                    b.Property<long>("Length")
                        .HasColumnName("length")
                        .HasColumnType("bigint");

                    b.Property<int>("Orientation")
                        .HasColumnName("orientation")
                        .HasColumnType("integer");

                    b.Property<long?>("ProfilePersonId")
                        .HasColumnName("profile_person_id")
                        .HasColumnType("bigint");

                    b.Property<string>("RawFormat")
                        .IsRequired()
                        .HasColumnName("raw_format")
                        .HasColumnType("text");

                    b.Property<long?>("ShotId")
                        .HasColumnName("shot_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Width")
                        .HasColumnName("width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClosetBackgroundPersonId")
                        .IsUnique();

                    b.HasIndex("ProfilePersonId")
                        .IsUnique();

                    b.HasIndex("ShotId");

                    b.HasIndex("Bucket", "Key")
                        .IsUnique();

                    b.ToTable("image");
                });

            modelBuilder.Entity("Api.Data.Models.ItemTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "ItemTagHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long>("ImageId")
                        .HasColumnName("image_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("X")
                        .HasColumnName("x")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnName("y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("item_tag");
                });

            modelBuilder.Entity("Api.Data.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "NotificationHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<long?>("CommentId")
                        .HasColumnName("comment_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ConsumerId")
                        .HasColumnName("consumer_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long>("ProducerId")
                        .HasColumnName("producer_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShotId")
                        .HasColumnName("shot_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ShotId");

                    b.HasIndex("Type", "ShotId", "CommentId", "ConsumerId", "ProducerId")
                        .IsUnique();

                    b.ToTable("notification");
                });

            modelBuilder.Entity("Api.Data.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "PersonHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnName("biography")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("citext");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnName("hashed_password")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastNameUpdatedAt")
                        .HasColumnName("last_name_updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("person");
                });

            modelBuilder.Entity("Api.Data.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "ProductHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<long>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId", "Code")
                        .IsUnique();

                    b.ToTable("product");
                });

            modelBuilder.Entity("Api.Data.Models.PushToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "PushTokenHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long?>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("PersonId", "Token")
                        .IsUnique();

                    b.ToTable("push_token");
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.FollowPerson", b =>
                {
                    b.Property<long>("FollowerId")
                        .HasColumnName("follower_id")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowedId")
                        .HasColumnName("followed_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FollowerId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("follow_person");
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.LikeComment", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnName("comment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PersonId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("like_comment");
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.LikeShot", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ShotId")
                        .HasColumnName("shot_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PersonId", "ShotId");

                    b.HasIndex("ShotId");

                    b.ToTable("like_shot");
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.ShotHashTag", b =>
                {
                    b.Property<long>("ShotId")
                        .HasColumnName("shot_id")
                        .HasColumnType("bigint");

                    b.Property<long>("HashTagId")
                        .HasColumnName("hash_tag_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ShotId", "HashTagId");

                    b.HasIndex("HashTagId");

                    b.ToTable("shot_hash_tag");
                });

            modelBuilder.Entity("Api.Data.Models.Shot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "ShotHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("shot");
                });

            modelBuilder.Entity("Api.Data.Models.Verification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "VerificationHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("AppUuid")
                        .IsRequired()
                        .HasColumnName("app_uuid")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnName("message_id")
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnName("method")
                        .HasColumnType("integer");

                    b.Property<int>("Purpose")
                        .HasColumnName("purpose")
                        .HasColumnType("integer");

                    b.Property<int>("ReRequestCount")
                        .HasColumnName("re_request_count")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("requested_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long?>("RequesterId")
                        .HasColumnName("requester_id")
                        .HasColumnType("bigint");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnName("to")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnName("verified_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequesterId");

                    b.ToTable("verification");
                });

            modelBuilder.Entity("Api.Data.Models.Comment", b =>
                {
                    b.HasOne("Api.Data.Models.Comment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Data.Models.Person", "Person")
                        .WithMany("Comments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Shot", "Shot")
                        .WithMany("Comments")
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Image", b =>
                {
                    b.HasOne("Api.Data.Models.Person", "ClosetBackgroundPerson")
                        .WithOne("ClosetBackgroundImage")
                        .HasForeignKey("Api.Data.Models.Image", "ClosetBackgroundPersonId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Api.Data.Models.Person", "ProfilePerson")
                        .WithOne("ProfileImage")
                        .HasForeignKey("Api.Data.Models.Image", "ProfilePersonId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Api.Data.Models.Shot", "Shot")
                        .WithMany("Images")
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.ClientNoAction);
                });

            modelBuilder.Entity("Api.Data.Models.ItemTag", b =>
                {
                    b.HasOne("Api.Data.Models.Image", "Image")
                        .WithMany("ItemTags")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Notification", b =>
                {
                    b.HasOne("Api.Data.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Data.Models.Person", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Person", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Shot", "Shot")
                        .WithMany()
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Data.Models.Product", b =>
                {
                    b.HasOne("Api.Data.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.PushToken", b =>
                {
                    b.HasOne("Api.Data.Models.Person", "Person")
                        .WithMany("PushTokens")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.FollowPerson", b =>
                {
                    b.HasOne("Api.Data.Models.Person", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Person", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.LikeComment", b =>
                {
                    b.HasOne("Api.Data.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Person", "Person")
                        .WithMany("LikeComments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.LikeShot", b =>
                {
                    b.HasOne("Api.Data.Models.Person", "Person")
                        .WithMany("LikeShots")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Shot", "Shot")
                        .WithMany("Likes")
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Relationships.ShotHashTag", b =>
                {
                    b.HasOne("Api.Data.Models.HashTag", "HashTag")
                        .WithMany("ShotHashTags")
                        .HasForeignKey("HashTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Shot", "Shot")
                        .WithMany("ShotHashTags")
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Shot", b =>
                {
                    b.HasOne("Api.Data.Models.Person", "Person")
                        .WithMany("Shots")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Verification", b =>
                {
                    b.HasOne("Api.Data.Models.Person", "Requester")
                        .WithMany("Verifications")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
